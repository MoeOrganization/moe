#!/usr/bin/env perl

use utf8;
use strict; 
use warnings;
use FindBin;

use Capture::Tiny qw[ capture ];
use Path::Class;

my $root     = dir($FindBin::Bin, "..");
my $examples = $root->subdir("syntax-examples");
my $syntax   = $root->file("syntax.md");
my $md       = $syntax->openw();

my ($header, $subheader) = ('', '');

# Print automated message and caveat
$md->print(q{
# Please NOTE: This is *_NOT_* the final syntax.  
This is simply showing some examples that have 
been proposed to start a discussion.  
# REPEAT: THERE IS NOTHING FINAL ABOUT ANYTHING IN THIS DOC

This doc was AUTOGENERATED via the files in `syntax-examples` tree 
});

sub recurse_dirs {
	my ($dir, $filter, $action) = @_;
	foreach my $i ( $dir->children ) {
		if ( $i->is_dir ) {
			recurse_dirs( $i, $filter, $action );
		}
		else {
			$action->( $i ) if $filter->( $i )
		}
	}
}

recurse_dirs(
	$examples, 
	sub { $_[0]->basename =~ /\.mo$/ },
	sub {
		my $f = shift;

		my $h = $f->parent->parent->basename;
		my $s = $f->parent->basename;

		$h =~ s/^\d\d\d\-//;
		$s =~ s/^\d\d\d\-//;

		if ( $header ne $h ) {
			$header = $h;
			$md->print("## $header\n\n");
		}
		if ( $subheader ne $s ) {
			$subheader = $s;
			$md->print("### $subheader\n\n");
		}
			
		my ($stdout, $stderr, $exit) = capture {
  			system( 'perl', '-Mstrict', '-Mfeature=switch', '-w', '-c', $f->stringify );
		};

		my @stderr = split /\n/ => $stderr;
		my $syntax_ok;

		if ( $stderr[-1] =~ /syntax OK$/ ) {
			$syntax_ok = 1;
			pop @stderr;
		}

		@stderr = grep { !/^Useless use of / } @stderr;

		$md->print( "----\n\n" );
		$md->print( '__', $f->basename, "__ - *" . ($syntax_ok ? 'syntax OK' : 'compilation errors') . "*\n\n" );
		$md->print( "*source:*\n" );
		$md->print( "```perl\n", (map { "$_" } $f->slurp), "\n```\n\n" );

		if ( @stderr ) {
			$md->print( "*" . ($syntax_ok ? 'warnings' : 'errors') . ":*\n\n" );
			my $trim = $f->parent->stringify . "/";
			$md->print( (
				map { "     $_\n" } 
				map { s/$trim//; $_ }
				@stderr
			), "\n\n" );
		}

	}
);

1;

__END__


